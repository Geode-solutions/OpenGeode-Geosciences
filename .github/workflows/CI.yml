name: CI

on: 
  push:
  pull_request:
  schedule:
    - cron: 0 0 * * *

jobs:
  format:
    runs-on: ubuntu-18.04
    
    steps:
      - uses: actions/checkout@v1
      - uses: Geode-solutions/actions/clang-format@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      
  build-linux:
    runs-on: ubuntu-18.04
    container: ${{ matrix.config.container }}
    needs: format
    strategy:
      matrix:
        config:
        - {container: "geodesolutions/ubuntu", build_type: "Debug", system: ubuntu, python: 3.6}
        - {container: "geodesolutions/ubuntu", build_type: "Release", system: ubuntu, python: 3.6}
        - {container: "geodesolutions/ubuntu", build_type: "Debug", system: ubuntu, python: 3.7}
        - {container: "geodesolutions/ubuntu", build_type: "Release", system: ubuntu, python: 3.7}
        - {container: "geodesolutions/ubuntu", build_type: "Debug", system: ubuntu, python: 3.8}
        - {container: "geodesolutions/ubuntu", build_type: "Release", system: ubuntu, python: 3.8}
        - {container: "geodesolutions/centos", build_type: "Debug", system: rhel, python: 2.7}
        - {container: "geodesolutions/centos", build_type: "Release", system: rhel, python: 2.7}


    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.config.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python }}
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '${{ matrix.config.python }}-${{ matrix.config.system }}.tar.gz'
        token: ${{ secrets.TOKEN }}
    - name: Compile
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_PREFIX_PATH:PATH=$GITHUB_WORKSPACE/${{ steps.opengeode.outputs.path }} -DOPENGEODE_GEOSCIENCES_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.config.python }} ..
        cmake --build . -- -j2
    - name: Test
      run: |
        mkdir -p test
        cd test
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_PREFIX_PATH:PATH="$GITHUB_WORKSPACE/build;$GITHUB_WORKSPACE/${{ steps.opengeode.outputs.path }}" ../tests
        cmake --build . -- -j2
        ctest --output-on-failure
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}        
      
  coverage:
    runs-on: ubuntu-18.04
    needs: format
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/master')


    steps:
    - uses: actions/checkout@v1
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-ubuntu.tar.gz'
        token: ${{ secrets.TOKEN }}
    - name: Compile
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH:PATH=${{ steps.opengeode.outputs.path }} ..
        cmake --build . -- -j2
    - name: Kcov
      run: curl -s https://raw.githubusercontent.com/Geode-solutions/actions/master/kcov.sh | bash -s -- ${GITHUB_WORKSPACE}/build/bin
    - uses: codecov/codecov-action@v1.0.2
      with: 
        token: ${{ secrets.CODECOV_TOKEN }}
        file: kcov/kcov-merged/cobertura.xml
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}        
      
  build-mac-xcode:
    runs-on: macos-latest
    needs: format
    strategy:
      matrix:
        config: [Debug, Release]
        python: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '${{ matrix.python }}-darwin.tar.gz'
        token: ${{ secrets.TOKEN }}
    - name: Compile & Test
      run: |
        mkdir -p build
        cd build
        cmake -G "Xcode" -DCMAKE_PREFIX_PATH:PATH=${GITHUB_WORKSPACE}/${{ steps.opengeode.outputs.path }} -DOPENGEODE_GEOSCIENCES_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} ..
        cmake --build . --config ${{ matrix.config }}
        ctest -C ${{ matrix.config }} --output-on-failure
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 

  build-windows:
    runs-on: windows-2016
    needs: format
    strategy:
      matrix:
        config: [Debug, Release]
        python: [3.6, 3.7]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '${{ matrix.python }}-win64.zip'
        token: ${{ secrets.TOKEN }}
    - name: Compile & Test
      run: |
        mkdir -p build
        cd build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_PREFIX_PATH:PATH=${env:GITHUB_WORKSPACE}/${{ steps.opengeode.outputs.path }} -DOPENGEODE_GEOSCIENCES_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} ..
        cmake --build . --config ${{ matrix.config }}
        ctest -C ${{ matrix.config }} --output-on-failure
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
        
  semantic-release:
    runs-on: ubuntu-18.04
    needs: [build-linux, coverage, build-mac-xcode, build-windows]
    steps:
    - uses: actions/checkout@v1
    - run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
